<?xml version="1.0" encoding="UTF-8"?>
<slime:DocumentModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:slime="http://de.mvmsoft.slimeuml.model.slimemodel">
  <children xsi:type="slime:ClassModel" x="46" y="40" width="476" height="1957" name="Tisch" classText="Tisch" methodText="+ void Tisch()&#xA;+ ISpieler getSpieler1()&#xA;+ ISpieler getSpieler2()&#xA;+ ISpieler getSpieler3()&#xA;+ Spielkarte[] getGespielteKarten()&#xA;+ ArrayList&lt;Spielkarte> getDeck()&#xA;+ SortedSet getReizwerte()&#xA;+ Spielkarte[] getSkat()&#xA;+ boolean getHandspiel()&#xA;+ ISpielart getSpielart()&#xA;+ Spielvariante getVariante()&#xA;+ int getReizwert()&#xA;+ int getReizagentWert()&#xA;+ boolean getSpaltarsch()&#xA;+ int getBockrunden()&#xA;+ int getRamschrunden()&#xA;+ boolean getBock()&#xA;+ int getAnzahlSpiele()&#xA;+ Spielkarte[] getTruempfe()&#xA;+ boolean getSechserskat()&#xA;+ boolean getOuvert()&#xA;+ boolean getSchwarz()&#xA;+ boolean getSchneider()&#xA;+ void setSechserskat(boolean sechserskat)&#xA;+ void setSpieler1(ISpieler spieler1)&#xA;+ void setSpieler2(ISpieler spieler2)&#xA;+ void setSpieler3(ISpieler spieler3)&#xA;+ void setSchneider(boolean wert)&#xA;+ void setSchwarz(boolean wert)&#xA;+ void setOuvert(boolean wert)&#xA;+ void setGespielteKarten(Spielkarte[] gespielteKarten)&#xA;+ void setSkat(Spielkarte[] skatkarten)&#xA;+ void setSpielart(ISpielart spielart)&#xA;+ void setVariante(Spielvariante variante)&#xA;+ void setReizwert(int wert)&#xA;+ void setReizagentWert(int wert)&#xA;+ void setHandspiel(boolean wert)&#xA;+ void setSpaltarsch(boolean b)&#xA;+ void setRamschrunden(int ramschrunden)&#xA;+ void setBockrunden(int bockrunden)&#xA;+ void setBock(boolean bock)&#xA;+ void setTruempfe(Spielkarte[] truempfe)&#xA;+ void erstelleDeck()&#xA;+ void mischeDeck()&#xA;+ ISpieler stichAuswerten(ISpielart spielart, Spielkarte[] gespielteKarten)&#xA;- void kartenInsBlatt(ArrayList&lt;Spielkarte> blatt, int kartenAnzahl)&#xA;+ void kartenAusteilen()&#xA;+ void addAnzahlSpiele()&#xA;+ void kartenBesitzergeben()&#xA;+ ISpieler ermittleAlleinspieler()&#xA;+ ISpieler ermittleMitspieler(ISpieler spieler)&#xA;+ void mitspielerSetzen()&#xA;+ void positionInitialisieren()&#xA;+ void positionWechseln()&#xA;+ void reizwerteErzeugen()&#xA;+ ISpieler getVorhand()&#xA;+ ISpieler getMittelhand()&#xA;+ ISpieler getHinterhand()&#xA;+ int naechstHoehererReizwert(int reizwert)&#xA;+ int naechstNiedrigererReizwert(int reizwert)&#xA;+ boolean pruefeNeuenReizwert(int alterWert, int neuerWert)&#xA;+ ISpieler naechsterSpieler(ISpieler spieler)&#xA;+ ISpieler gibMenschlicherSpieler()&#xA;+ boolean spielAuswerten()&#xA;- boolean ramschAuswertung()&#xA;+ ISpieler[] sortiereSpielerRamsch(ISpieler[] spieler)&#xA;+ ISpieler[] entscheideRamsch(ISpieler[] spieler, int skataugen, int bock)&#xA;+ int getAktuellePunkte(ISpieler spieler)&#xA;+ int getProzentAllein(ISpieler spieler)&#xA;+ int getAnzahlAllein(ISpieler spieler)&#xA;+ int wertePunkte(int augenzahl)&#xA;+ int punkteVarianten(int erg, int augenzahl)&#xA;+ int werteAugen(ArrayList&lt;Spielkarte> stiche)&#xA;+ int berechneStufe(int augenzahl)&#xA;- int berechnestufe2(int stufe)&#xA;+ boolean checkVerloren(int augenzahl)&#xA;+ boolean nullVerloren()&#xA;+ boolean anderesSpielVerloren(int augenzahl)&#xA;+ int ueberreizCheck(int punkte)&#xA;- int ueberreizcheck2(int stufe)&#xA;+ int anzahlderGewinne(ISpieler spieler)&#xA;+ int punkteNullspiel()&#xA;+ int punkteGrandspiel(int augenzahl)&#xA;+ int punkteFarbspiel(int augenzahl)" attributeText="- ISpieler spieler1&#xA;- ISpieler spieler2&#xA;- ISpieler spieler3&#xA;- ISpielart spielart&#xA;- ArrayList&lt;Spielkarte> deck&#xA;- Spielkarte[] gespielteKarten&#xA;- Spielkarte[] skat&#xA;- boolean handspiel&#xA;- boolean ouvert&#xA;- boolean schneider&#xA;- boolean schwarz&#xA;- int reizwert&#xA;- int reizagentWert&#xA;- Spielvariante variante&#xA;- SortedSet&lt;Integer> reizwerte&#xA;- int anzahlSpiele&#xA;- Spielkarte[] truempfe&#xA;- boolean spaltarsch&#xA;- boolean bock&#xA;- int ramschrunden&#xA;- int bockrunden&#xA;- boolean sechserskat&#xA;- int gewinngrenze&#xA;- int spaltarschwert&#xA;- int schneidergrenze&#xA;- int gegnerschneider&#xA;- int maximaleaugen&#xA;- int allestiche" qualifiedClassName="de.uniluebeck.skat09.Tisch" javaProjectName="Skat09" style="1535" type="=Skat09/src&lt;de.uniluebeck.skat09{Tisch.java[Tisch"/>
  <children xsi:type="slime:ClassModel" x="562" y="40" width="49" height="87" name="Main" classText="Main" qualifiedClassName="de.uniluebeck.skat09.Main" javaProjectName="Skat09" style="1532" type="=Skat09/src&lt;de.uniluebeck.skat09{Main.java[Main">
    <methodFilters>+ void main(String[] args)</methodFilters>
  </children>
  <children xsi:type="slime:ClassModel" x="651" y="40" width="174" height="172" name="Stiche" classText="Stiche" methodText="+ void Stiche(Tisch tisch)&#xA;+ void init()&#xA;+ void update()&#xA;+ void schliessen()" attributeText="- JPanel panel&#xA;- Tisch tisch&#xA;- JScrollPane scroller" qualifiedClassName="de.uniluebeck.skat09.ui.gui.Stiche" javaProjectName="Skat09" style="1535" type="=Skat09/src&lt;de.uniluebeck.skat09.ui.gui{Stiche.java[Stiche"/>
  <children xsi:type="slime:ClassModel" x="865" y="40" width="370" height="1124" name="HFenster" classText="HFenster" methodText="+ void HFenster(Tisch tisch, GUIausgabe ausgabe)&#xA;+ boolean getSagen()&#xA;+ boolean getHoeren()&#xA;+ void setZug(boolean zug)&#xA;+ int getGewaehlteKarte()&#xA;+ String getFarbe()&#xA;+ String getSpielart()&#xA;+ boolean getHandspiel()&#xA;+ boolean getSchneider()&#xA;+ boolean getSchwarz()&#xA;+ boolean getOuvert()&#xA;+ boolean getAgent()&#xA;+ int getReizlim()&#xA;+ void setAugen(int augen)&#xA;+ void setGespielteKarten(Spielkarte[] gespielteKarten)&#xA;+ void init()&#xA;+ void gegnerHandInit()&#xA;+ void aufHandInit()&#xA;+ void linkeSeiteInit()&#xA;+ void rechteSeiteInit()&#xA;+ void mitteInit()&#xA;+ void blattAusgeben(ISpieler spieler)&#xA;+ void skatAusgeben(Spielkarte[] skat)&#xA;+ void auswertung(boolean gewonnen)&#xA;+ void auswertung2(boolean gewonnen)&#xA;+ String ramschAuswertung(boolean gewonnen)&#xA;+ int handkarte()&#xA;+ void andereKarte()&#xA;+ void reizLimfest()&#xA;+ void handspiel()&#xA;+ void schneider()&#xA;+ void schwarz()&#xA;+ void ouvert()&#xA;+ void ansagen()&#xA;+ void alleinspieler()&#xA;+ void trumpf()&#xA;+ void spielBeginnt()&#xA;+ void stichGewonnen(ISpieler spieler)&#xA;+ void spieltKarte(Spielkarte karte)&#xA;+ void menschSpieltKarte()&#xA;+ void reizagent()&#xA;+ void sagen(int reizwert)&#xA;+ void hoeren(int reizwert)&#xA;+ void actionPerformed(ActionEvent e)&#xA;+ void blattneu(ISpieler spieler)&#xA;+ void tischRaumen()&#xA;+ void mouseClicked(MouseEvent e)&#xA;+ void mouseEntered(MouseEvent e)&#xA;+ void mouseExited(MouseEvent e)&#xA;+ void mousePressed(MouseEvent e)&#xA;+ void mouseReleased(MouseEvent e)&#xA;+ JLayeredPane kartenruecken(ISpieler spieler)&#xA;+ void erstelleMenu()&#xA;+ void gegnerKarten(ISpieler spieler2, ISpieler spieler3)&#xA;+ void spielAufrauemen()&#xA;+ void keyPressed(KeyEvent arg0)&#xA;+ void keyReleased(KeyEvent e)&#xA;+ void keyTyped(KeyEvent e)&#xA;+ void gewaehlteKarte(boolean rechts)&#xA;+ void statistik()&#xA;+ String[] statistikText(ISpieler spieler)&#xA;+ void setzeStats(JLabel label, int x, int y)" qualifiedClassName="de.uniluebeck.skat09.ui.gui.HFenster" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.ui.gui{HFenster.java[HFenster"/>
  <children xsi:type="slime:ClassModel" x="1275" y="40" width="48" height="87" name="Wert" classText="Wert" qualifiedClassName="de.uniluebeck.skat09.spielkarte.Wert" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielkarte{Wert.java[Wert"/>
  <children xsi:type="slime:ClassModel" x="2218" y="1578" width="784" height="189" name="Ramsch" classText="Ramsch" methodText="+ void Ramsch()&#xA;+ boolean gespielteKartePruefen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ boolean bubeBedienen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ Spielkarte hoehereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte sortiereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ String toString()&#xA;+ int karteBewerten(Spielkarte karte)" qualifiedClassName="de.uniluebeck.skat09.spielart.Ramsch" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Ramsch.java[Ramsch">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.22" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="1363" y="40" width="71" height="87" name="Position" classText="Position" qualifiedClassName="de.uniluebeck.skat09.spieler.Position" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{Position.java[Position"/>
  <children xsi:type="slime:ClassModel" x="3042" y="1578" width="815" height="206" name="Farbspiel" classText="Farbspiel" methodText="+ void Farbspiel(Farbe trumpffarbe)&#xA;+ Farbe getTrumpffarbe()&#xA;+ boolean gespielteKartePruefen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ boolean bubeOderTrumpfBedienen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ Spielkarte hoehereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte hoehereKarteEinTrumpf(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte sortiereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ String toString()" qualifiedClassName="de.uniluebeck.skat09.spielart.Farbspiel" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Farbspiel.java[Farbspiel">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.22" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="5545" y="1578" width="352" height="291" name="RegelkonformerSpieler" classText="RegelkonformerSpieler" methodText="+ void RegelkonformerSpieler(String name)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte[] druecken(Spielkarte[] skat)&#xA;+ boolean handspiel()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ ISpielart spielAnsagen()&#xA;+ boolean hoeren(int reizwert)&#xA;+ boolean sagen(int reizwert)&#xA;+ Farbspiel farbe()&#xA;+ boolean agent()&#xA;+ int reizlimitFestlegen()" qualifiedClassName="de.uniluebeck.skat09.spieler.RegelkonformerSpieler" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{RegelkonformerSpieler.java[RegelkonformerSpieler">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.24" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="1226" y="1578" width="456" height="903" name="GUIausgabe" classText="GUIausgabe" methodText="+ void GUIausgabe(Tisch tisch)&#xA;+ boolean hoeren(int wert)&#xA;+ boolean sagen(int alterWert)&#xA;+ void spiel()&#xA;+ String name()&#xA;+ String gegner(int nummer)&#xA;+ String frageVariante()&#xA;+ void falscheEingabe()&#xA;+ boolean handspiel()&#xA;+ int druecken(ArrayList&lt;Spielkarte> blatt, int nummer)&#xA;+ Farbspiel farbe()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ ISpielart spielAnsagen()&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten, ISpieler spieler)&#xA;- void zeigegespielteKarten(Spielkarte[] gespielteKarten)&#xA;+ void stichGewonnen(ISpieler spieler)&#xA;+ void blattAusgeben(ISpieler spieler)&#xA;+ void skatAusgeben(Spielkarte[] skat)&#xA;+ void auswertung(boolean gewonnen)&#xA;+ void spielBeendet()&#xA;+ void weg(ISpieler spieler)&#xA;+ void andereKarte()&#xA;+ void hhVSgewinner(ISpieler gewinner)&#xA;+ void leerzeile()&#xA;+ void mhVSvh()&#xA;+ void spielBeginnt()&#xA;+ void spielEinpassen()&#xA;+ void augen(int augen)&#xA;+ void punkte(int punkte)&#xA;+ void alleinspieler()&#xA;+ void trumpf()&#xA;+ void neuesSpiel()&#xA;+ String einlesen()&#xA;+ boolean reizAgent()&#xA;+ int reizlimitFestlegen()&#xA;+ void spieltKarte(ISpieler spieler, Spielkarte karte)&#xA;+ boolean spielBeenden()&#xA;+ void punkteAusgeben()&#xA;+ void warte()&#xA;+ Farbspiel farbeansagen(String s)&#xA;+ void tischLoeschen()&#xA;+ String getBlattwahl()&#xA;+ String frageSechserskat()&#xA;+ void hauptfensterOeffnen()&#xA;+ void positionAnzeigen()&#xA;+ void guiAufraumen()&#xA;+ void statistik()" qualifiedClassName="de.uniluebeck.skat09.ui.GUIausgabe" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.ui{GUIausgabe.java[GUIausgabe">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.10" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="1770" y="40" width="456" height="869" incomingConnections="//@children.9/@outgoingConnections.0 //@children.23/@outgoingConnections.0" name="Ausgabe" classText="Ausgabe" methodText="+ boolean getRelease()&#xA;+ void setRelease(boolean release)&#xA;+ String name()&#xA;+ boolean hoeren(int wert)&#xA;+ boolean sagen(int reizWert)&#xA;+ String gegner(int nummer)&#xA;+ String frageVariante()&#xA;+ void falscheEingabe()&#xA;+ boolean handspiel()&#xA;+ void spiel()&#xA;+ int druecken(ArrayList&lt;Spielkarte> blatt, int nummer)&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ boolean ouvert()&#xA;+ ISpielart spielAnsagen()&#xA;+ Farbspiel farbe()&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten, ISpieler spieler)&#xA;+ void stichGewonnen(ISpieler spieler)&#xA;+ void blattAusgeben(ISpieler spieler)&#xA;+ void skatAusgeben(Spielkarte[] skat)&#xA;+ void weg(ISpieler spieler)&#xA;+ void spielBeendet()&#xA;+ void auswertung(boolean gewonnen)&#xA;+ void hhVSgewinner(ISpieler gewinner)&#xA;+ void mhVSvh()&#xA;+ void leerzeile()&#xA;+ void spielEinpassen()&#xA;+ void spielBeginnt()&#xA;+ void andereKarte()&#xA;+ void augen(int augen)&#xA;+ void punkte(int punkte)&#xA;+ void alleinspieler()&#xA;+ void trumpf()&#xA;+ void neuesSpiel()&#xA;+ String einlesen()&#xA;+ void spieltKarte(ISpieler spieler, Spielkarte karte)&#xA;+ int reizlimitFestlegen()&#xA;+ boolean reizAgent()&#xA;+ boolean spielBeenden()&#xA;+ void punkteAusgeben()&#xA;+ void tischLoeschen()&#xA;+ String getBlattwahl()&#xA;+ String frageSechserskat()&#xA;+ void hauptfensterOeffnen()&#xA;+ void statistik()&#xA;+ void guiAufraumen()&#xA;+ void positionAnzeigen()" qualifiedClassName="de.uniluebeck.skat09.ui.Ausgabe" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.ui{Ausgabe.java[Ausgabe"/>
  <children xsi:type="slime:ClassModel" x="5937" y="1578" width="352" height="291" name="Oma" classText="Oma" methodText="+ void Oma(String name)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten)&#xA;+ boolean hoeren(int reizwert)&#xA;+ boolean sagen(int alterWert)&#xA;+ Spielkarte[] druecken(Spielkarte[] skat)&#xA;+ boolean handspiel()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ ISpielart spielAnsagen()&#xA;+ Farbspiel farbe()&#xA;+ boolean agent()&#xA;+ int reizlimitFestlegen()" qualifiedClassName="de.uniluebeck.skat09.spieler.Oma" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{Oma.java[Oma">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.24" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="1474" y="40" width="111" height="87" name="Spielvariante" classText="Spielvariante" qualifiedClassName="de.uniluebeck.skat09.Spielvariante" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09{Spielvariante.java[Spielvariante"/>
  <children xsi:type="slime:ClassModel" x="3897" y="1578" width="784" height="189" name="Nullspiel" classText="Nullspiel" methodText="+ void Nullspiel()&#xA;+ boolean gespielteKartePruefen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ boolean farbeBedienen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ Spielkarte hoehereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte sortiereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ int karteBewerten(Spielkarte karte)&#xA;+ String toString()" qualifiedClassName="de.uniluebeck.skat09.spielart.Nullspiel" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Nullspiel.java[Nullspiel">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.22" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="1625" y="40" width="105" height="87" name="SpielerEnum" classText="SpielerEnum" qualifiedClassName="de.uniluebeck.skat09.spieler.SpielerEnum" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{SpielerEnum.java[SpielerEnum"/>
  <children xsi:type="slime:ClassModel" x="2266" y="40" width="206" height="104" name="Farbe" classText="Farbe" methodText="+ int wert()&#xA;- void Farbe(int ordnungswert)" qualifiedClassName="de.uniluebeck.skat09.spielkarte.Farbe" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielkarte{Farbe.java[Farbe"/>
  <children xsi:type="slime:ClassModel" x="2512" y="40" width="284" height="359" name="Fenster" classText="Fenster" methodText="+ void Fenster(GUIausgabe ausgabe)&#xA;- void init()&#xA;+ void setzteOptionen()&#xA;- void erstelleOptions()&#xA;+ void logo()&#xA;+ void actionPerformed(ActionEvent arg0)&#xA;+ SpielerEnum getMitspieler1()&#xA;+ SpielerEnum getMitspieler2()&#xA;+ int getSkatWahl()&#xA;+ String getName()&#xA;+ void setDeutsch(boolean deutsch)&#xA;+ boolean getDeutsch()&#xA;+ boolean getSechserkat()&#xA;+ void keyPressed(KeyEvent arg0)&#xA;+ void keyReleased(KeyEvent e)&#xA;+ void keyTyped(KeyEvent arg0)&#xA;+ void beenden()" qualifiedClassName="de.uniluebeck.skat09.ui.gui.Fenster" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.ui.gui{Fenster.java[Fenster"/>
  <children xsi:type="slime:ClassModel" x="2836" y="40" width="277" height="257" name="Spielkarte" classText="Spielkarte" methodText="+ void Spielkarte(Farbe farbe, Wert wert)&#xA;+ Farbe getFarbe()&#xA;+ Wert getWert()&#xA;+ ISpieler getBesitzer()&#xA;+ void setBesitzer(ISpieler besitzer)&#xA;+ String toString()&#xA;+ boolean equals(Spielkarte karte)&#xA;+ int compareTo(Spielkarte karte)&#xA;+ String deutFarbe()&#xA;+ String deutWert()&#xA;+ String dateiPfad()" qualifiedClassName="de.uniluebeck.skat09.spielkarte.Spielkarte" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielkarte{Spielkarte.java[Spielkarte"/>
  <children xsi:type="slime:ClassModel" x="6329" y="1578" width="1050" height="1260" name="SchlauerSpieler" classText="SchlauerSpieler" methodText="+ void SchlauerSpieler(String name)&#xA;+ int getMaxReizwert()&#xA;+ ArrayList&lt;Spielkarte> getAnfangsBlatt()&#xA;+ void setAnfangsblatt(ArrayList&lt;Spielkarte> blatt)&#xA;+ void setMaxReizwert(int maxReizwert)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte grandSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte farbeSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte nullSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte ramschSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte rauskommenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsZweiterKarteSpielenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsDritterKarteSpielenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte rauskommen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsZweiterKarteSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsDritterKarteSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte rauskommenNull(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsZweiterKarteSpielenNull(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsDritterKarteSpielenNull(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alleinspielerRauskommenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alleinspieleralsZweiterKarteSpielenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alleinspieleralsDritterKarteSpielenGrand(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte rauskommenRamsch(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsZweiterKarteSpielenRamsch(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte alsDritterKarteSpielenRamsch(Spielkarte[] gespielteKarten)&#xA;+ ArrayList&lt;Spielkarte> gegnerMoeglicheSpielbareKarten(Spielkarte[] gespielteKarten)&#xA;+ ArrayList&lt;Spielkarte> moeglicheGegnerKarten(ArrayList&lt;Spielkarte> alleGespielteKarten, Spielkarte[] gespieltenKarten)&#xA;+ int zufallszahl(ArrayList&lt;Spielkarte> kartenliste)&#xA;+ Spielkarte naechstHoehereKarte(Farbe farbe, Spielkarte karte)&#xA;+ Spielkarte naechstHoehereKarteNeun(Farbe farbe)&#xA;+ Spielkarte naechstHoehereKarteKoenig(Farbe farbe)&#xA;+ Spielkarte naechstHoehereKarteZehn(Farbe farbe)&#xA;+ Spielkarte naechstNiedrigereKarte(Farbe farbe, Spielkarte karte)&#xA;+ Spielkarte naechstNiedrigereKarteDame(Farbe farbe)&#xA;+ Spielkarte naechstNiedrigereKarteZehn(Farbe farbe)&#xA;+ Spielkarte naechstNiedrigereKarteAss(Farbe farbe)&#xA;+ ArrayList&lt;Spielkarte> kartenEinesWertes(ArrayList&lt;Spielkarte> blatt, Wert wert)&#xA;+ ArrayList&lt;Spielkarte> kartenEinerFarbe(ArrayList&lt;Spielkarte> blatt, Farbe farbe)&#xA;+ Spielkarte hoechsteSpielbareKarte(ArrayList&lt;Spielkarte> spielbareKarten)&#xA;+ Spielkarte niedrigsteSpielbareKarte(ArrayList&lt;Spielkarte> spielbareKarten)&#xA;+ Spielkarte hoechsteSpielbareKarteBestimmen(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte niedrigsteSpielbareKarteBestimmen(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte[] druecken(Spielkarte[] skat)&#xA;+ boolean handspiel()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ ISpielart spielAnsagen()&#xA;+ boolean hoeren(int reizwert)&#xA;+ boolean sagen(int reizWert)&#xA;+ Farbspiel farbe()&#xA;+ boolean agent()&#xA;+ int reizlimitFestlegen()&#xA;+ void bestimmeMaxReizwert()&#xA;+ void maxReizwertFarbe(int ermittelteSpitzen)&#xA;+ void maxReizwertGrand(int ermittelteSpitzen)&#xA;+ void maxReizwertNull()&#xA;+ int ermittleSpitzen(ISpielart zuReizendeSpielart)&#xA;+ int spitzenZaehlen(Spielkarte[] spitzen)&#xA;+ int ohne(Spielkarte[] spitzen)&#xA;+ int mit(Spielkarte[] spitzen)&#xA;+ Spielkarte[] farbeSpitzen(ISpielart zuReizendeSpielart)&#xA;+ Spielkarte[] grandSpitzen(ISpielart zuReizendeSpielart)&#xA;+ ISpielart bestimmeSpielart()&#xA;+ ArrayList&lt;Spielkarte> ermittleKurzeLangeFarbe(boolean lang)&#xA;+ ArrayList&lt;Spielkarte> ermittleKurzeFarbe(ArrayList&lt;Spielkarte> karo, ArrayList&lt;Spielkarte> herz, ArrayList&lt;Spielkarte> pik, ArrayList&lt;Spielkarte> kreuz)&#xA;+ ArrayList&lt;Spielkarte> ermittleLangeFarbe(ArrayList&lt;Spielkarte> karo, ArrayList&lt;Spielkarte> herz, ArrayList&lt;Spielkarte> pik, ArrayList&lt;Spielkarte> kreuz)&#xA;+ Farbe ermittleTrumpffarbe()&#xA;+ int werteAugen(ArrayList&lt;Spielkarte> stiche)&#xA;+ int augenKarte(Spielkarte karte)" qualifiedClassName="de.uniluebeck.skat09.spieler.SchlauerSpieler" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{SchlauerSpieler.java[SchlauerSpieler">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.24" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="4721" y="1578" width="784" height="172" name="Grandspiel" classText="Grandspiel" methodText="+ void Grandspiel()&#xA;+ boolean gespielteKartePruefen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ boolean bubeBedienen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ Spielkarte hoehereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte sortiereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ String toString()" qualifiedClassName="de.uniluebeck.skat09.spielart.Grandspiel" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Grandspiel.java[Grandspiel">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.22" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="7419" y="1578" width="420" height="291" name="MenschlicherSpieler" classText="MenschlicherSpieler" methodText="+ void MenschlicherSpieler(String name, IController controller)&#xA;+ boolean hoeren(int reizwert)&#xA;+ boolean sagen(int reizWert)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte[] druecken(Spielkarte[] skat)&#xA;+ boolean handspiel()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ ISpielart spielAnsagen()&#xA;+ Farbspiel farbe()&#xA;+ int reizlimitFestlegen()&#xA;+ boolean agent()" qualifiedClassName="de.uniluebeck.skat09.spieler.MenschlicherSpieler" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{MenschlicherSpieler.java[MenschlicherSpieler">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.24" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="3153" y="40" width="501" height="648" name="Controller" classText="Controller" methodText="+ void Controller(Tisch tisch, IAusgabe ausgabe)&#xA;+ IAusgabe getAusgabe()&#xA;+ Tisch getTisch()&#xA;+ void release()&#xA;+ void spiel()&#xA;+ void anmelden()&#xA;+ void waehleGegner()&#xA;+ void waehleSkatart()&#xA;+ void waehleSkatblatt()&#xA;+ void leiteReizen()&#xA;+ ISpieler reizen2(ISpieler spieler1, ISpieler spieler2)&#xA;+ boolean reizenOderReizagent(ISpieler spieler, int reizwert, boolean sagen)&#xA;+ ISpieler reizen1(ISpieler spieler1, ISpieler spieler2)&#xA;+ void entscheideraeuberspiel()&#xA;+ void leiteSpiel()&#xA;+ void alleinspielerAktionen()&#xA;+ void bereiteSpielvor()&#xA;+ void auswertung()&#xA;+ void aufrauemen()&#xA;+ void stichAuswertung(Spielkarte[] gespielteKarten, ISpieler gewinner)&#xA;+ boolean reizagent(ISpieler spieler)&#xA;+ boolean spielBeenden()&#xA;+ void skatkartenBesitzergeben()&#xA;+ void flagsSetzen(ISpieler alleinspieler, ISpielart spielart)&#xA;+ void update(Observable tisch, Object gespielteKarten)&#xA;+ void warte()&#xA;+ void einpassen()&#xA;+ void ramschen()&#xA;+ void normalerSpielverlauf()&#xA;+ void spielRaeuberskat()&#xA;+ void spielRamschBock()&#xA;+ void spielIntSkat()&#xA;+ void schlauerSpielerInit()&#xA;+ void namenVergleich()" qualifiedClassName="de.uniluebeck.skat09.Controller" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09{Controller.java[Controller"/>
  <children xsi:type="slime:ClassModel" x="3897" y="40" width="784" height="291" incomingConnections="//@children.5/@outgoingConnections.0 //@children.7/@outgoingConnections.0 //@children.13/@outgoingConnections.0 //@children.19/@outgoingConnections.0" name="Spielart" classText="Spielart" methodText="+ Spielartbezeichnung getSpielart()&#xA;+ void setSpielart(Spielartbezeichnung art)&#xA;+ boolean gespielteKartePruefen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ boolean farbeBedienen(ArrayList&lt;Spielkarte> blatt, Spielkarte[] gespielteKarten, Spielkarte zuPruefendeKarte)&#xA;+ Spielkarte hoehereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte sortiereKarte(Spielkarte karte1, Spielkarte karte2)&#xA;+ String toString()&#xA;+ Spielkarte hoehererBube(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte hoehereFarbe(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte hoehereKarteEinBube(Spielkarte karte1, Spielkarte karte2)&#xA;+ Spielkarte hoehereKarteFarbe(Spielkarte karte1, Spielkarte karte2)&#xA;+ int karteBewerten(Spielkarte karte)&#xA;+ int bubeBewerten(Spielkarte karte)" qualifiedClassName="de.uniluebeck.skat09.spielart.Spielart" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Spielart.java[Spielart"/>
  <children xsi:type="slime:ClassModel" x="1722" y="1578" width="456" height="988" name="CLIausgabe" classText="CLIausgabe" methodText="+ void CLIausgabe(Tisch tisch)&#xA;+ void falscheEingabe()&#xA;+ boolean hoeren(int wert)&#xA;+ void weg(ISpieler spieler)&#xA;+ boolean sagen(int reizWert)&#xA;+ void spiel()&#xA;+ String name()&#xA;+ String gegner(int nummer)&#xA;+ String frageVariante()&#xA;+ boolean handspiel()&#xA;+ int druecken(ArrayList&lt;Spielkarte> blatt, int nummer)&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ boolean ouvert()&#xA;+ ISpielart spielAnsagen()&#xA;+ Farbspiel farbe()&#xA;+ void blattAusgeben(ISpieler spieler)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten, ISpieler spieler)&#xA;+ int intEinlesen()&#xA;+ void stichGewonnen(ISpieler spieler)&#xA;+ void clear()&#xA;+ void skatAusgeben(Spielkarte[] skat)&#xA;+ void auswertung(boolean gewonnen)&#xA;+ void spielBeendet()&#xA;+ void mhVSvh()&#xA;+ void leerzeile()&#xA;+ void hhVSgewinner(ISpieler gewinner)&#xA;+ void spielEinpassen()&#xA;+ void spielBeginnt()&#xA;+ void andereKarte()&#xA;+ void augen(int augen)&#xA;+ void punkte(int punkte)&#xA;+ void alleinspieler()&#xA;+ void gewinntReizen(ISpieler spieler)&#xA;+ void trumpf()&#xA;+ void neuesSpiel()&#xA;+ boolean reizAgent()&#xA;+ int reizlimitFestlegen()&#xA;+ String einlesen()&#xA;+ void spieltKarte(ISpieler spieler, Spielkarte karte)&#xA;+ boolean spielBeenden()&#xA;+ boolean jaNeinAbfrage()&#xA;+ void punkteAusgeben()&#xA;+ void tischLoeschen()&#xA;+ String getBlattwahl()&#xA;+ String frageSechserskat()&#xA;+ void hauptfensterOeffnen()&#xA;+ void positionAnzeigen()&#xA;+ void guiAufraumen()&#xA;+ void hilfe()&#xA;+ void hilfeSpielbar(Spielkarte[] gespielteKarten)&#xA;+ void hilfeStiche()&#xA;+ void statistik()&#xA;+ void statistik2()" qualifiedClassName="de.uniluebeck.skat09.ui.CLIausgabe" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.ui{CLIausgabe.java[CLIausgabe">
    <outgoingConnections xsi:type="slime:ClassConnectionModel" target="//@children.10" type="GENERALIZATION" toNavigable="true"/>
  </children>
  <children xsi:type="slime:ClassModel" x="6344" y="40" width="473" height="971" incomingConnections="//@children.8/@outgoingConnections.0 //@children.11/@outgoingConnections.0 //@children.18/@outgoingConnections.0 //@children.20/@outgoingConnections.0" name="Spieler" classText="Spieler" methodText="+ void Spieler(String name)&#xA;+ String getName()&#xA;+ Position getPosition()&#xA;+ ArrayList&lt;Spielkarte> getBlatt()&#xA;+ ArrayList&lt;Spielkarte> getStiche()&#xA;+ boolean getIstAlleinspieler()&#xA;+ ArrayList&lt;Integer> getSpiele()&#xA;+ ISpieler getMitspieler()&#xA;+ ArrayList&lt;Spielkarte> getSkat()&#xA;+ ArrayList&lt;Spielkarte> getAllegespieltenkarten()&#xA;+ ArrayList&lt;Spielkarte> getRestblatt()&#xA;+ ISpielart getSpielart()&#xA;+ int getHandspiele()&#xA;+ void setHandspiele(int handspiele)&#xA;+ void setSpielart(ISpielart spielart)&#xA;+ void setPosition(Position position)&#xA;+ void setBlatt(ArrayList&lt;Spielkarte> blatt)&#xA;+ void setIstAlleinspieler(boolean istAlleinspieler)&#xA;+ void setMitspieler(ISpieler mitspieler)&#xA;+ void setSpiele(ArrayList&lt;Integer> spiele)&#xA;+ void setStiche(ArrayList&lt;Spielkarte> stiche)&#xA;+ void setName(String name)&#xA;+ void setAlleGespieltenKarten(ArrayList&lt;Spielkarte> karten)&#xA;+ void setTruempfe(Spielkarte[] truempfe)&#xA;+ void setDeck(ArrayList&lt;Spielkarte> deck)&#xA;+ void setSkat(ArrayList&lt;Spielkarte> skat)&#xA;+ void stichHinzufuegen(Spielkarte[] stich)&#xA;+ void gespielteKartenHinzufuegen(Spielkarte[] gespielteKarten)&#xA;+ ArrayList&lt;Spielkarte> spielbareKarten(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte spieleKarte(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte zufaelligErlaubteKarteSpielen(Spielkarte[] gespielteKarten)&#xA;+ Spielkarte[] druecken(Spielkarte[] skat)&#xA;+ ISpielart spielAnsagen()&#xA;+ boolean handspiel()&#xA;+ boolean ouvert()&#xA;+ boolean schneider()&#xA;+ boolean schwarz()&#xA;+ Farbspiel farbe()&#xA;+ ArrayList&lt;Integer> neuerEintrag(int punkte)&#xA;+ boolean hoeren(int reizwert)&#xA;+ boolean sagen(int alterWert)&#xA;+ void blattSortieren(ISpielart spielart)&#xA;+ boolean agent()&#xA;+ boolean equals(ISpieler spieler)&#xA;+ int reizlimitFestlegen()&#xA;+ Spielkarte[] spitzenEinordnen()&#xA;+ void bubeneinordnen()&#xA;+ int bubeneinordnenhilf(int bubenwert)&#xA;+ void farbeneinordnen()&#xA;+ int farbeeinordnenhilf(int i)&#xA;+ int spitzenZahl()&#xA;+ int spitzenMit(int erg)&#xA;+ int spitzenOhne(int erg)" qualifiedClassName="de.uniluebeck.skat09.spieler.Spieler" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spieler{Spieler.java[Spieler"/>
  <children xsi:type="slime:ClassModel" x="3694" y="40" width="163" height="87" name="Spielartbezeichnung" classText="Spielartbezeichnung" qualifiedClassName="de.uniluebeck.skat09.spielart.Spielartbezeichnung" javaProjectName="Skat09" style="1533" type="=Skat09/src&lt;de.uniluebeck.skat09.spielart{Spielartbezeichnung.java[Spielartbezeichnung"/>
</slime:DocumentModel>
